"""7ef1696e7a3c701282e529885a3bb99217136d2772e7fb9a01e7be73c9b83dbf"""

import sys
from typing import (
    TypeVar,
    Any,
    Tuple,
    Type,
    Union,
    overload,
    Optional,
    List,
    Callable,
    NoReturn,
    Callable,
    Sequence,
    type_check_only,
)

from numpy import (
    ndarray,
    generic,
    dtype,
    ufunc,
    bool_,
    unsignedinteger,
    signedinteger,
    floating,
    complexfloating,
    timedelta64,
    datetime64,
    object_,
    _Casting,
    _OrderKACF,
)
from numpy.typing import (
    ArrayLike,
    DTypeLike,
    _NestedSequence,
    _SupportsArray,
    _RecursiveSequence,
    _ArrayLikeBool_co,
    _ArrayLikeUInt_co,
    _ArrayLikeInt_co,
    _ArrayLikeFloat_co,
    _ArrayLikeComplex_co,
    _ArrayLikeTD64_co,
    _ArrayLikeDT64_co,
    _ArrayLikeObject_co,
    _DTypeLikeBool,
    _DTypeLikeUInt,
    _DTypeLikeInt,
    _DTypeLikeFloat,
    _DTypeLikeComplex,
    _DTypeLikeTD64,
    _DTypeLikeDT64,
    _DTypeLikeObject,
)

if sys.version_info >= (3, 8):
    from typing import Literal
else:
    from typing_extensions import Literal

_T = TypeVar("_T")
_ArrayType = TypeVar("_ArrayType", bound=ndarray[Any, Any])
_ST1 = TypeVar("_ST1", bound=generic)
_ST2 = TypeVar("_ST2", bound=generic)

_ScalarOrArray1 = Union[_ST1, ndarray[Any, dtype[_ST1]]]
_ScalarOrArray2 = Tuple[
    Union[_ST1, _ST2],
    Union[ndarray[Any, dtype[_ST1]], ndarray[Any, dtype[_ST2]]]
]

# In reality this should be a length of list 3 containing an
# int, an int, and a callable/`None`, but there's no way to express
# that.
_ExtObj = List[Union[int, Optional[Callable[[str, int], Any]]]]

_ArrayLikeTD64 = _NestedSequence[_SupportsArray[dtype[timedelta64]]]

@type_check_only
class abs(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['absolute']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class absolute(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['absolute']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class add(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[datetime64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[datetime64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['add']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[22]: ...
    @property
    def identity(self) -> Literal[0]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class arccos(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['arccos']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class arccosh(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['arccosh']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class arcsin(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['arcsin']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class arcsinh(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['arcsinh']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class arctan(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['arctan']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class arctan2(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['arctan2']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class arctanh(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['arctanh']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class bitwise_and(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['bitwise_and']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[12]: ...
    @property
    def identity(self) -> Literal[-1]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class bitwise_not(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['invert']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[12]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class bitwise_or(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['bitwise_or']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[12]: ...
    @property
    def identity(self) -> Literal[0]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class bitwise_xor(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['bitwise_xor']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[12]: ...
    @property
    def identity(self) -> Literal[0]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class cbrt(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['cbrt']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class ceil(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['ceil']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[7]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class conj(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['conjugate']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[18]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class conjugate(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['conjugate']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[18]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class copysign(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['copysign']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class cos(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['cos']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[9]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class cosh(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['cosh']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class deg2rad(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['deg2rad']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class degrees(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['degrees']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class divide(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[_ArrayLikeTD64_co]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeTD64, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['true_divide']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[11]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class divmod(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | Tuple[ndarray[Any, Any], ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[unsignedinteger[Any], unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | Tuple[ndarray[Any, Any], ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[signedinteger[Any], signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | Tuple[ndarray[Any, Any], ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[floating[Any], floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeTD64, out: None | Tuple[ndarray[Any, Any], ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[signedinteger[Any], _ArrayLikeTD64_co]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[Any, Any]: ...
    @property
    def __name__(self) -> Literal['divmod']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[2]: ...
    @property
    def nargs(self) -> Literal[4]: ...
    @property
    def ntypes(self) -> Literal[15]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...

@type_check_only
class equal(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['equal']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[23]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class exp(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['exp']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[10]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class exp2(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['exp2']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class expm1(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['expm1']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class fabs(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['fabs']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class float_power(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['float_power']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class floor(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['floor']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[7]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class floor_divide(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[_ArrayLikeTD64_co]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeTD64, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['floor_divide']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[21]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class fmax(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[datetime64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['fmax']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[21]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class fmin(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[datetime64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['fmin']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[21]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class fmod(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['fmod']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[15]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class frexp(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | Tuple[ndarray[Any, Any], ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[floating[Any], signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[Any, Any]: ...
    @property
    def __name__(self) -> Literal['frexp']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[2]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...

@type_check_only
class gcd(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> NoReturn: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['gcd']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[11]: ...
    @property
    def identity(self) -> Literal[0]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class greater(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['greater']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[23]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class greater_equal(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['greater_equal']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[23]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class heaviside(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['heaviside']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class hypot(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['hypot']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> Literal[0]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class invert(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['invert']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[12]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class isfinite(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['isfinite']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class isinf(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['isinf']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class isnan(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['isnan']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class isnat(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['isnat']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[2]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class lcm(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> NoReturn: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['lcm']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[11]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class ldexp(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['ldexp']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class left_shift(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['left_shift']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[11]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class less(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['less']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[23]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class less_equal(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['less_equal']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[23]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class log(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['log']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[10]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class log10(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['log10']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class log1p(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['log1p']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class log2(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['log2']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class logaddexp(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['logaddexp']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> float: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class logaddexp2(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['logaddexp2']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> float: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class logical_and(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['logical_and']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> Literal[True]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class logical_not(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['logical_not']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class logical_or(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['logical_or']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[20]: ...
    @property
    def identity(self) -> Literal[False]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class logical_xor(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['logical_xor']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[19]: ...
    @property
    def identity(self) -> Literal[False]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class matmul(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['matmul']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[19]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> Literal['(n?,k),(k,m?)->(n?,m?)']: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class maximum(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[datetime64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['maximum']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[21]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class minimum(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[datetime64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['minimum']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[21]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class mod(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeTD64, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[_ArrayLikeTD64_co]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['remainder']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[16]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class modf(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | Tuple[ndarray[Any, Any], ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[floating[Any], floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray2[Any, Any]: ...
    @property
    def __name__(self) -> Literal['modf']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[2]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...

@type_check_only
class multiply(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['multiply']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[23]: ...
    @property
    def identity(self) -> Literal[1]: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class negative(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> NoReturn: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['negative']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[19]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class nextafter(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['nextafter']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class not_equal(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['not_equal']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[23]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class positive(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> NoReturn: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['positive']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[19]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class power(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['power']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[18]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class rad2deg(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['rad2deg']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class radians(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['radians']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[5]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class reciprocal(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['reciprocal']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[18]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class remainder(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeTD64, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[_ArrayLikeTD64_co]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['remainder']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[16]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class right_shift(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['right_shift']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[11]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class rint(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['rint']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[10]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class sign(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> NoReturn: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['sign']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[19]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class signbit(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[bool_]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['signbit']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class sin(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['sin']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[9]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class sinh(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['sinh']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class spacing(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['spacing']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[4]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class sqrt(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['sqrt']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[10]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class square(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['square']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[18]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class subtract(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeBool_co, __x2: _ArrayLikeBool_co, out: None = ..., *, dtype: None | _DTypeLikeBool = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> NoReturn: ...
    @overload
    def __call__(self, __x1: _ArrayLikeUInt_co, __x2: _ArrayLikeUInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeUInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[unsignedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeInt_co, __x2: _ArrayLikeInt_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeInt = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[signedinteger[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeTD64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeDT64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[timedelta64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeDT64_co, __x2: _ArrayLikeTD64_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeDT64 = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[datetime64]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['subtract']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[21]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class tan(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['tan']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class tanh(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['tanh']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[8]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO

@type_check_only
class true_divide(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeComplex_co, __x2: _ArrayLikeComplex_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeComplex = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[complexfloating[Any, Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[_ArrayLikeTD64_co]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeTD64, __x2: _ArrayLikeTD64, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: Any = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, __x2: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, __x2: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['true_divide']: ...
    @property
    def nin(self) -> Literal[2]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[3]: ...
    @property
    def ntypes(self) -> Literal[11]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
    reduce: Callable[..., Any]  # TODO
    reduceat: Callable[..., Any]  # TODO
    accumulate: Callable[..., Any]  # TODO
    outer: Callable[..., Any]  # TODO

@type_check_only
class trunc(ufunc):
    @overload
    def __call__(self, __x1: _ArrayLikeFloat_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeFloat = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[floating[Any]]: ...
    @overload
    def __call__(self, __x1: _ArrayLikeObject_co, out: None | ndarray[Any, Any] | Tuple[ndarray[Any, Any]] = ..., *, dtype: None | _DTypeLikeObject = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @overload
    def __call__(self, __x1: ArrayLike, out: Any = ..., *, signature: str | DTypeLike | Tuple[DTypeLike, ...], dtype: None | str = ..., casting: _Casting = ..., order: _OrderKACF = ..., subok: bool = ..., extobj: _ExtObj = ..., where: None | _ArrayLikeBool_co = ...) -> _ScalarOrArray1[Any]: ...
    @property
    def __name__(self) -> Literal['trunc']: ...
    @property
    def nin(self) -> Literal[1]: ...
    @property
    def nout(self) -> Literal[1]: ...
    @property
    def nargs(self) -> Literal[2]: ...
    @property
    def ntypes(self) -> Literal[7]: ...
    @property
    def identity(self) -> None: ...
    @property
    def signature(self) -> None: ...
    at: Callable[..., Any]  # TODO
